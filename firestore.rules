
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isUserAuthenticated() {
      return request.auth != null;
    }

    // Retorna os dados do perfil do usuário autenticado se existir, caso contrário null.
    function authedUserProfileData() {
      return request.auth != null && exists(/databases/$(database)/documents/user_profiles/$(request.auth.uid))
        ? get(/databases/$(database)/documents/user_profiles/$(request.auth.uid)).data
        : null;
    }

    // Verifica se o usuário autenticado tem um determinado papel.
    function authedUserHasRole(roleName) {
      let profileData = authedUserProfileData();
      return profileData != null && profileData.role == roleName;
    }

    function isAdmin() {
      return authedUserHasRole('admin');
    }

    function isCentralOperator() {
      return authedUserHasRole('central_operator');
    }

    function isHospitalOperator() {
      return authedUserHasRole('hospital_operator');
    }

    function isUbsOperator() {
      return authedUserHasRole('ubs_operator');
    }

    function isAnyOperator() {
      let profileData = authedUserProfileData();
      return profileData != null && (
        profileData.role == 'central_operator' ||
        profileData.role == 'hospital_operator' ||
        profileData.role == 'ubs_operator'
      );
    }

    // Verifica se a movimentação é para o hospital associado ao usuário.
    function isMovementForAssociatedHospital(movementData) {
      let profileData = authedUserProfileData();
      return profileData != null &&
             profileData.associatedHospitalId != null &&
             movementData.hospitalId == profileData.associatedHospitalId;
    }

    // Verifica se a movimentação é para a unidade associada ao usuário, se aplicável.
    function isMovementForAssociatedUnitIfApplicable(movementData) {
      let profileData = authedUserProfileData();
      return profileData != null &&
             (profileData.associatedUnitId == null || movementData.unitId == profileData.associatedUnitId);
    }

    // Helper function for stockConfigs write rule
    function isWriteToAssociatedStockConfig(configWriteData) {
      let profileData = authedUserProfileData();
      if (profileData == null || profileData.associatedHospitalId == null) {
        return false; // Operator must have an associated hospital
      }

      // Check if the config's hospitalId matches the operator's associatedHospitalId
      let hospitalMatch = configWriteData.hospitalId == profileData.associatedHospitalId;
      if (!hospitalMatch) {
        return false;
      }

      // If operator is tied to a specific unit, the config's unitId must match
      if (profileData.associatedUnitId != null) {
        return configWriteData.unitId == profileData.associatedUnitId;
      }

      // If operator is general for a hospital/UBS (no specific unit assigned to operator),
      // they can modify any unit config within their hospital, or the general UBS stock config.
      // configWriteData.unitId can be an actual unit ID or null/undefined (for general UBS stock).
      return true;
    }

    // --- Collection Rules ---

    // User Profiles Collection
    match /user_profiles/{userId} {
      allow create: if isUserAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow get: if isUserAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow list: if isAdmin(); // Only admins can list all user profiles
      allow update: if isUserAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow delete: if isAdmin();
    }

    // Items Collection
    match /items/{itemId} {
      allow read: if isUserAuthenticated();
      allow create, update, delete: if isAdmin() || isCentralOperator();
    }

    // Hospitals Collection
    match /hospitals/{hospitalId} {
      allow read: if isUserAuthenticated();
      allow create, update, delete: if isAdmin() || isCentralOperator();
    }

    // Served Units Collection
    match /servedUnits/{unitId} {
      allow read: if isUserAuthenticated();
      allow create, update, delete: if isAdmin() || isCentralOperator();
    }

    // Patients Collection
    match /patients/{patientId} {
      allow read: if isUserAuthenticated(); // Consider refining for operators later if needed
      allow create, update: if isAdmin() || isAnyOperator();
      allow delete: if isAdmin();
    }

    // Stock Configs Collection
    match /stockConfigs/{configId} {
      allow read: if isUserAuthenticated();
      allow write: if // Admins/CentralOps can do anything
                     isAdmin() || isCentralOperator() ||
                     // Hospital/UBS Operators can write if it's their location
                     ( (isHospitalOperator() || isUbsOperator()) &&
                       isWriteToAssociatedStockConfig(request.resource.data)
                     );
    }

    // Stock Movements Collection
    match /stockMovements/{movementId} {
      allow read: if isUserAuthenticated(); // Consider refining for operators later if needed
      allow create: if
          isUserAuthenticated() &&
          (
            (isAdmin() || isCentralOperator()) || // Admins/CentralOps can create any movement type
            ( // Hospital/UBS Operators can only create 'consumption' movements for their locations
              (isHospitalOperator() || isUbsOperator()) &&
              request.resource.data.type == 'consumption' &&
              isMovementForAssociatedHospital(request.resource.data) &&
              isMovementForAssociatedUnitIfApplicable(request.resource.data)
            )
          );
      allow update, delete: if isAdmin();
    }
  }
}
